
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/04_callbacks.ipynb
import os
os.chdir('/content/gdrive/MyDrive/first_try_of_fastai/exp')
from nb_03 import *
os.chdir('/content/gdrive/MyDrive/first_try_of_fastai')

class Dataset():
  def __init__(self, x, y): self.x,self.y = x,y
  def __len__(self): return len(self.x)
  def __getitem__(self, i): return self.x[i], self.y[i]

def get_dls(train_ds, valid_ds, bs, **kwargs):
  return (DataLoader(train_ds, batch_size=bs,shuffle= True, **kwargs),
          DataLoader(valid_ds, batch_size=bs*2, **kwargs))

class DataBunch():
  def __init__(self, train_dl, valid_dl, c=None):
    self.train_dl, self.valid_dl, self.c = train_dl,valid_dl,c

  @property
  def train_ds(self): return self.train_dl.dataset

  @property
  def valid_ds(self): return self.valid_ds.dataset

def get_model(data, lr=0.5, nh=50):
  m = data.train_ds.x.shape[1]
  model = nn.Sequential(nn.Linear(m,nh), nn.ReLU(), nn.Linear(nh,data.c))
  return model, optim.SGD(model.parameters(), lr=lr)

class Learner():
  def __init__(self, model, opt, loss_func, data):
    self.model, self.opt, self.loss_func, self.data = model,opt,loss_func,data